swagger: "2.0"
info:
  description: "This is a sample server Book-storage server."
  version: "0.0.1-SNAPSHOT"
  title: "Swagger Book-storage"
  contact:
    email: "alexey.konyaev.ru@yandex.ru"
host: "localhost:8080"
basePath: "/v2"
tags:
- name: "book"
  description: "Access to Book-storage"
- name: "author"
  description: "Access to Author-storage"
- name: "genre"
  description: "Access to Genre-storage"
schemes:
- "https"
- "http"
paths:

  /api/book:
    post:
      tags:
      - "book"
      summary: "Add a new book to the store"
      description: ""
      operationId: "createBook"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "object"
        description: "Book object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Book"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "Bad request"
    get:
      tags:
      - "book"
      summary: "Find all books"
      description: ""
      operationId: "listBook"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        "404":
          description: "Books not found"
    delete:
      tags:
      - "book"
      summary: "Delete a book"
      description: ""
      operationId: "deleteBookById"
      produces:
      - "application/json"
      responses:
        "204": 
          description: "No content"
  /api/book/{bookId}:
    get:
      tags:
      - "book"
      summary: "Find book by ID"
      description: ""
      operationId: "getBook
    ById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "bookId"
        in: "path"
        description: "ID of book to return"
        required: true
        type: "integer"
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"
        "404":
          description: "Book not found"
    put:
      tags: 
      - "book"
      summary: "Update book by ID"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "bookId"
        in: "path"
        description: "ID of book to update"
        required: true
        type: "integer"
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
        "404":
          description: "Book not found"
    delete:
      tags:
      - "book"
      summary: "Delete a book"
      description: ""
      operationId: "deleteBookByID"
      produces:
      - "application/json"
      parameters:
      - name: "bookId"
        in: "path"
        description: "Book id to delete"
        required: true
        type: "integer"
        format: "int32"
      responses:
        "204": 
          description: "No content"
        "404":
          description: "Book not found"

  /api/author:
    post:
      tags:
      - "author"
      summary: "Add a new author to the store"
      description: ""
      operationId: "createAuthor"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "object"
        description: "Author object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Author"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Author"
        "400":
          description: "Bad request"
    get:
      tags:
      - "author"
      summary: "Find all authors"
      description: ""
      operationId: "listAuthor"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Author"
        "404":
          description: "Authors not found"
    delete:
      tags:
      - "author"
      summary: "Deletes a author"
      description: ""
      operationId: "deleteAuthor"
      produces:
      - "application/json"
      responses:
        "204":
          description: "No content"
  /api/author/{authorId}:
    get:
      tags:
      - "author"
      summary: "Find author by ID"
      description: ""
      operationId: "getAuthorById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorId"
        in: "path"
        description: "ID of author to return"
        required: true
        type: "integer"
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Author"
        "404":
          description: "Author not found"
    put:
      tags: 
      - "author"
      summary: "Update author by ID"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorId"
        in: "path"
        description: "ID of author to update"
        required: true
        type: "integer"
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
        "404":
          description: "Author not found"
    delete:
      tags:
      - "author"
      summary: "Deletes a author"
      description: ""
      operationId: "deleteAuthorByID"
      produces:
      - "application/json"
      parameters:
      - name: "authorId"
        in: "path"
        description: "Author id to delete"
        required: true
        type: "integer"
        format: "int32"
      responses:
        "204": 
          description: "No content"
        "404":
          description: "Author not found"

  /api/genre:
    post:
      tags:
      - "genre"
      summary: "Add a new genre to the store"
      description: ""
      operationId: "createGenre"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "object"
        description: "Genre object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Genre"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Genre"
        "400":
          description: "Bad request"
    get:
      tags:
      - "genre"
      summary: "Find all genres"
      description: ""
      operationId: "listGenre"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Genre"
        "404":
          description: "Genres not found"
    delete:
      tags:
      - "genre"
      summary: "Deletes a genre"
      description: ""
      operationId: "deleteGenre"
      produces:
      - "application/json"
      responses:
        "204": 
          description: "No content"
  /api/genre/{genreId}:
    get:
      tags:
      - "genre"
      summary: "Find genre by ID"
      description: ""
      operationId: "getGenreById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "genreId"
        in: "path"
        description: "ID of genre to return"
        required: true
        type: "integer"
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Genre"
        "404":
          description: "Genre not found"
    put:
      tags: 
      - "genre"
      summary: "Update genre by ID"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "genreId"
        in: "path"
        description: "ID of genre to update"
        required: true
        type: "integer"
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
        "404":
          description: "Genre not found"
    delete:
      tags:
      - "genre"
      summary: "Deletes a genre"
      description: ""
      operationId: "deleteGenreByID"
      produces:
      - "application/json"
      parameters:
      - name: "genreId"
        in: "path"
        description: "Genre id to delete"
        required: true
        type: "integer"
        format: "int32"
      responses:
        "204": 
          description: "No content"
        "404":
          description: "Genre not found"
          
definitions:
  Author:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      firstName:
        type: "string"
      secondName:
        type: "string"
      birthday:
        type: "string"
        format: "date"
  Genre:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
  Book:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      title:
        type: "string"
      year:
        type: "integer"
        format: "int32"
      pageCount:
        type: "integer"
        format: "int32"
      authorId:
        type: "integer"
        format: "int32"
      genreId:
        type: "integer"
        format: "int32"
  ApiResponse:
    type: "object"
    required:
    - "result"
    properties:
      result:
        type: "boolean"
      idT:
        type: "integer"
        format: "int64"